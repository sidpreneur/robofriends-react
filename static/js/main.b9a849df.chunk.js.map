{"version":3,"sources":["Card.js","CardList.js","robots.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","username","email","CardList","robots","cardLoop","map","user","i","key","Search","searchfield","onSearchChange","type","placeholder","onChange","App","event","setState","target","value","state","filteredRobots","filter","toLowerCase","includes","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAsBeA,EApBF,SAACC,GACb,OACC,yBAAKC,UAAY,0CAChB,yBAAKC,IAAM,MAAOC,IAAG,+BAA4BH,EAAMI,GAAlC,cACrB,gCAAMJ,EAAMK,KAAZ,KACA,4BAAKL,EAAMM,UACX,+BAAKN,EAAMO,MAAX,OCSYC,EAdE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAWD,EAAOE,KAAI,SAACC,EAAOC,GACnC,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EAAGT,GAAOK,EAAOI,GAAGT,GAAKE,SAAaG,EAAOI,GAAGP,SAAWD,KAASI,EAAOI,GAAGR,KAAOE,MAAUE,EAAOI,GAAGN,WAG9H,OACC,6BACGG,ICVQD,G,MAAS,CACpB,CACEL,GAAI,EACJC,KAAM,iBACNC,SAAU,YACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,iBACNC,SAAU,SACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,iBACNC,SAAU,eACVC,MAAO,kBAET,CACEH,GAAI,EACJC,KAAM,aACNC,SAAU,oBACVC,MAAO,yBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,qBACNC,SAAU,aACVC,MAAO,mBAET,CACEH,GAAI,EACJC,KAAM,aACNC,SAAU,gBACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,iBACNC,SAAU,iBACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,UACNC,SAAU,kBACVC,MAAO,uBAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,4BC/CIQ,EAVA,SAAC,GAAqC,EAAnCC,YAAoC,IAAtBC,EAAqB,EAArBA,eAC/B,OACC,2BACAC,KAAO,SACPC,YAAc,kBACdC,SAAYH,KCyCCI,E,kDAzCd,aAAe,IAAD,8BACb,gBAQDJ,eAAiB,SAACK,GACjB,EAAKC,SAAS,CAACP,YAAcM,EAAME,OAAOC,SAR1C,EAAKC,MAAQ,CACZjB,OAAQ,CAAEA,UACVO,YAAc,IAJF,E,qDAiBJ,IAAD,OACFW,EAAiBlB,EAAOmB,QAAO,SAAAnB,GACpC,OAAOA,EAAOJ,KAAKwB,cAAcC,SAAS,EAAKJ,MAAMV,YAAYa,kBAGlE,OACA,6BACC,yBAAK5B,UAAY,SAChB,4CAED,yBAAKA,UAAY,UAChB,kBAAC,EAAD,CAAQgB,eAAkBc,KAAKd,kBAEhC,6BACC,kBAAC,EAAD,CAAUR,OAAUkB,U,GAhCNK,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b9a849df.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className = 'tc bg-light-green dib pa3 br2 ma2 grow'>\n\t\t\t<img alt = 'icn'  src = {`https://robohash.org/${props.id}?200*200`}/>\n\t\t\t<h1> {props.name} </h1>\n\t\t\t<h4>{props.username}</h4>\n\t\t\t<p> {props.email} </p>\n\t\t</div>\n\n\n\n\t)\n}\n\n\n\n\n\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\tconst cardLoop = robots.map((user , i) => {\n\t\treturn\t<Card key = {i} id = { robots[i].id } username = { robots[i].username } name = { robots[i].name } email = { robots[i].email }/>\n\t})\n\n\treturn (\n\t\t<div>\n\t\t\t{ cardLoop }\n\t\t</div>\n\t);\n\n}\n\n\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Siddhant Singh',\n    username: 'sidlancer',\n    email: 'Sidlancer3000@gmail.com'\n  },\n  {\n    id: 2,\n    name: 'Satakshi Singh',\n    username: 'chotki',\n    email: 'Satakshisingh98@gmail.com'\n  },\n  {\n    id: 3,\n    name: 'Anuradha Singh',\n    username: 'mommy.danger',\n    email: 'mummy@mummy.in'\n  },\n  {\n    id: 4,\n    name: 'Rafeh Qazi',\n    username: 'clever.programmer',\n    email: 'cleverqazi@reddif.com'\n  },\n  {\n    id: 5,\n    name: 'Aman Dhattarwal',\n    username: 'phodo.bhaiya',\n    email: 'feelaarhi@hai.na'\n  },\n  {\n    id: 6,\n    name: 'Ranveer Allahbadia',\n    username: 'beerbiceps',\n    email: 'beer@biceps.trs'\n  },\n  {\n    id: 7,\n    name: 'Kurzgesart',\n    username: 'science.itoff',\n    email: 'with@space.notmilitary'\n  },\n  {\n    id: 8,\n    name: 'Variant Comics',\n    username: 'aris.quinuones',\n    email: 'marvel@dc.comics'\n  },\n  {\n    id: 9,\n    name: 'What If',\n    username: 'space.knowledge',\n    email: 'planet@destroyed.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n\n\n","import React from 'react';\n\nconst Search = ( {searchfield , onSearchChange} ) => {\n\treturn (\n\t\t<input \n\t\ttype = 'search' \n\t\tplaceholder = 'Search Robots..'\n\t\tonChange = {onSearchChange}/>\n\t)\n}\n\n\nexport default Search;","import React from 'react';\nimport CardList from './CardList';\nimport './App.css'\nimport { robots } from './robots';\nimport Search from './Search';\n\nclass App extends React.Component{\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots :{ robots },\n\t\t\tsearchfield : '',\n\t\t}\n\t}\n\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield : event.target.value})\t\t\n\t}\n\n\n\n\n\n\trender() {\n\t\tconst filteredRobots = robots.filter(robots => {\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\n\t\t})\n\t\treturn (\n\t\t<div>\n\t\t\t<div className = 'tc f2'>\n\t\t\t\t<h1>RoboFriends</h1>\n\t\t\t</div>\n\t\t\t<div className = 'tc pa3'>\n\t\t\t\t<Search onSearchChange = {this.onSearchChange}/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<CardList robots = {filteredRobots}/>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t)\n\t}\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}